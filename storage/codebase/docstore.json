{"docstore/metadata": {"73120af9-c087-4f11-b055-209520d9e932": {"doc_hash": "e365a9723e6def6f0a084e8c2aa04116ca531fe30b084d995e255dac67f99222"}, "f708d704-319b-49d8-8fbb-4d3edb212eef": {"doc_hash": "17540f8e4dee22c44ebc518651401a988c820fcaa1d097b04a8f04547c4e5b95"}, "89177e8e-f44a-4bae-b91a-463329c381fc": {"doc_hash": "e404eda5237d05a7a068c7b7b32b9a2d778b8704aa7362f21a11233a10e91f68", "ref_doc_id": "73120af9-c087-4f11-b055-209520d9e932"}, "b9e97fb9-8805-4445-ac56-74f073ec4786": {"doc_hash": "df4509146ae164ca41cb504ea421cd320e18fc89adc8a8d110eccb8f4a755fc7", "ref_doc_id": "73120af9-c087-4f11-b055-209520d9e932"}, "af082a0d-3469-401c-9e13-0b2141d5f754": {"doc_hash": "5045df8de5193f32c0149904d7693dfce09258c7aa117ab2d2f8e6c16ecee256", "ref_doc_id": "73120af9-c087-4f11-b055-209520d9e932"}, "db02cefd-6d7f-4810-9dd8-2c6a5211c6f7": {"doc_hash": "8b197ce3bce6f709e3d78844ced849922d4f4e700678b53e7a73f6948e234c61", "ref_doc_id": "f708d704-319b-49d8-8fbb-4d3edb212eef"}, "105cbce5-0d4c-4444-88ab-6df1593ec120": {"doc_hash": "a8a24c289a8e1f85fdd4058b1bce7948498315923318ae0bb95c45585c757f34", "ref_doc_id": "f708d704-319b-49d8-8fbb-4d3edb212eef"}}, "docstore/data": {"89177e8e-f44a-4bae-b91a-463329c381fc": {"__data__": {"id_": "89177e8e-f44a-4bae-b91a-463329c381fc", "embedding": null, "metadata": {"file_path": "C:\\Users\\Josh\\Desktop\\DEV\\AGENTS\\V-1\\AI-Agent-Code-Generator\\data\\codebase\\main1.py", "file_name": "main1.py", "file_type": "text/x-python", "file_size": 9306, "creation_date": "2025-03-15", "last_modified_date": "2025-03-15"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "73120af9-c087-4f11-b055-209520d9e932", "node_type": "4", "metadata": {"file_path": "C:\\Users\\Josh\\Desktop\\DEV\\AGENTS\\V-1\\AI-Agent-Code-Generator\\data\\codebase\\main1.py", "file_name": "main1.py", "file_type": "text/x-python", "file_size": 9306, "creation_date": "2025-03-15", "last_modified_date": "2025-03-15"}, "hash": "e365a9723e6def6f0a084e8c2aa04116ca531fe30b084d995e255dac67f99222", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b9e97fb9-8805-4445-ac56-74f073ec4786", "node_type": "1", "metadata": {}, "hash": "59660c982e19b4acec1c1d9bdb7307ebc1c8b8537bc0f5aead281463e1f67e89", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "import csv\r\nimport time\r\nimport sys\r\nfrom selenium import webdriver\r\nfrom selenium.webdriver.chrome.options import Options\r\nfrom selenium.webdriver.common.keys import Keys\r\nfrom selenium.webdriver.common.by import By\r\n\r\nRETRY = 1\r\n    \r\ndef sendkeys_ENSURE(driver: webdriver.Chrome, id: str, sec: float = 0.25) -> int:\r\n    \"\"\"\r\n    Sends keys to a web element identified by its ID and ensures the action is completed by adding a delay.\r\n\r\n    Args:\r\n        driver (webdriver.Chrome): The Selenium WebDriver instance.\r\n        id (str): The ID of the web element.\r\n        sec (float, optional): The delay in seconds after sending keys. Defaults to 0.25.    \r\n\r\n    Returns:\r\n        int: 0 if successful, exception if an error occurs.\r\n    \"\"\"\r\n    try:\r\n        element = driver.find_element(By.ID, id)\r\n        element.clear()\r\n        element.send_keys(val)\r\n        element.send_keys(Keys.TAB)\r\n        time.sleep(sec)\r\n        return 0\r\n    except Exception as e:\r\n        return e\r\n\r\ndef tabout_FOCUS(driver: webdriver.Chrome, id: str, sec: float = 0.25) -> int:\r\n    \"\"\"\r\n    Sends a TAB key to a web element to move focus away and ensures the action is completed by adding a delay.\r\n\r\n    Args:\r\n        driver (webdriver.Chrome): The Selenium WebDriver instance.\r\n        id (str): The ID of the web element.\r\n        sec (float, optional): The delay in seconds after sending the TAB key. Defaults to 0.25.\r\n\r\n    Returns:\r\n        int: 0 if successful, exception if an error occurs.\r\n    \"\"\"\r\n    try:\r\n        element = driver.find_element(By.ID, id)\r\n        element.send_keys(Keys.TAB)\r\n        time.sleep(sec)\r\n        return 0\r\n    except Exception as e:\r\n        return e\r\n    \r\ndef exec_ENSURE(driver: webdriver.Chrome, id: str, script: str, sec: float = 0.25) -> int:   \r\n    \"\"\"\r\n    Executes a JavaScript script on a web element identified by its ID and ensures the action is completed by adding a delay.\r\n\r\n    Args:\r\n        driver (webdriver.Chrome): The Selenium WebDriver instance.\r\n        id (str): The ID of the web element.\r\n        script (str): The JavaScript script to execute.\r\n        sec (float, optional): The delay in seconds after executing the script. Defaults to 0.25.\r\n\r\n    Returns:\r\n        int: The response from the script execution or 0 if successful, exception if an error occurs.\r\n    \"\"\"\r\n    try:\r\n        element = driver.find_element(By.ID, id)\r\n        response = driver.execute_script(script, element)\r\n        time.sleep(sec)\r\n        return response or 0\r\n    except Exception as e:\r\n        return e\r\n\r\ndef select_option(driver: webdriver.Chrome, id: str, option: str, sec: float) -> int:        \r\n    \"\"\"\r\n    Selects an option from a dropdown menu identified by its ID.\r\n\r\n    Args:\r\n        driver (webdriver.Chrome): The Selenium WebDriver instance.\r\n        id (str): The ID of the dropdown menu.\r\n        option (str): The option to select.\r\n        sec (float): The delay in seconds after finding the options.\r\n\r\n    Returns:\r\n        int: 0 if successful, exception if an error occurs.\r\n    \"\"\"\r\n    try:\r\n        container = driver.find_element(By.ID, id)\r\n        options = container.find_elements(By.TAG_NAME, 'option')\r\n        time.sleep(sec)\r\n        for i, opt in enumerate(options):\r\n            if opt.text == option:\r\n                exec_ENSURE(driver, f\"{id}\", f\"arguments[0].selectedIndex = {i};\", 0.25)     \r\n                break\r\n        return 0\r\n    except Exception as e:\r\n        return e\r\n    \r\ndef refresh_iframe(driver: webdriver.Chrome, id: str, sec: float, bckout: bool = True) -> int:\r\n    \"\"\"\r\n    Refreshes an iframe identified by its ID and optionally switches to the default content. \r\n\r\n    Args:\r\n        driver (webdriver.Chrome): The Selenium WebDriver instance.\r\n        id (str): The ID of the iframe.\r\n        sec (float): The delay in seconds after switching to the iframe.\r\n        bckout (bool, optional): Whether to switch to the default content before refreshing. Defaults to True.\r\n\r\n    Returns:\r\n        int: 0 if successful, exception if an error occurs.\r\n    \"\"\"\r\n    try:\r\n        if bckout:\r\n            driver.switch_to.default_content()\r\n        IFRAME = driver.find_element(By.ID, id)\r\n        driver.switch_to.frame(IFRAME)\r\n        time.sleep(sec)\r\n        return 0\r\n    except Exception as e:\r\n        return e\r\n    \r\ndef Automate(input_set: dict[list], driver: webdriver.Chrome, url_start: str):\r\n    \"\"\"\r\n    Automates the process of interacting with a web application using Selenium.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4508, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b9e97fb9-8805-4445-ac56-74f073ec4786": {"__data__": {"id_": "b9e97fb9-8805-4445-ac56-74f073ec4786", "embedding": null, "metadata": {"file_path": "C:\\Users\\Josh\\Desktop\\DEV\\AGENTS\\V-1\\AI-Agent-Code-Generator\\data\\codebase\\main1.py", "file_name": "main1.py", "file_type": "text/x-python", "file_size": 9306, "creation_date": "2025-03-15", "last_modified_date": "2025-03-15"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "73120af9-c087-4f11-b055-209520d9e932", "node_type": "4", "metadata": {"file_path": "C:\\Users\\Josh\\Desktop\\DEV\\AGENTS\\V-1\\AI-Agent-Code-Generator\\data\\codebase\\main1.py", "file_name": "main1.py", "file_type": "text/x-python", "file_size": 9306, "creation_date": "2025-03-15", "last_modified_date": "2025-03-15"}, "hash": "e365a9723e6def6f0a084e8c2aa04116ca531fe30b084d995e255dac67f99222", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "89177e8e-f44a-4bae-b91a-463329c381fc", "node_type": "1", "metadata": {"file_path": "C:\\Users\\Josh\\Desktop\\DEV\\AGENTS\\V-1\\AI-Agent-Code-Generator\\data\\codebase\\main1.py", "file_name": "main1.py", "file_type": "text/x-python", "file_size": 9306, "creation_date": "2025-03-15", "last_modified_date": "2025-03-15"}, "hash": "e404eda5237d05a7a068c7b7b32b9a2d778b8704aa7362f21a11233a10e91f68", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "af082a0d-3469-401c-9e13-0b2141d5f754", "node_type": "1", "metadata": {}, "hash": "19a48fc779b4b3064459d527093004d35f301ca89e9469af450e6f466cf7bcc8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Args:\r\n        driver (webdriver.Chrome): The Selenium WebDriver instance.\r\n        id (str): The ID of the iframe.\r\n        sec (float): The delay in seconds after switching to the iframe.\r\n        bckout (bool, optional): Whether to switch to the default content before refreshing. Defaults to True.\r\n\r\n    Returns:\r\n        int: 0 if successful, exception if an error occurs.\r\n    \"\"\"\r\n    try:\r\n        if bckout:\r\n            driver.switch_to.default_content()\r\n        IFRAME = driver.find_element(By.ID, id)\r\n        driver.switch_to.frame(IFRAME)\r\n        time.sleep(sec)\r\n        return 0\r\n    except Exception as e:\r\n        return e\r\n    \r\ndef Automate(input_set: dict[list], driver: webdriver.Chrome, url_start: str):\r\n    \"\"\"\r\n    Automates the process of interacting with a web application using Selenium.\r\n\r\n    Args:\r\n        input_set (dict[list]): A dictionary containing input data for automation.\r\n        driver (webdriver.Chrome): The Selenium WebDriver instance.\r\n        url_start (str): The starting URL for the automation process.\r\n\r\n    Returns:\r\n        dict: A dictionary containing failed automation attempts.\r\n    \"\"\"\r\n    fail_set = {}\r\n    for emplid in input_set.keys():\r\n        try:\r\n            driver.get(url_start)\r\n            refresh_iframe(driver, \"ptifrmtgtframe\", 0.25, False)\r\n            el_ = driver.find_element(By.ID, \"PEOPLE_SRCH_EMPLID\")\r\n            el_.clear()\r\n            el_.send_keys(emplid + Keys.ENTER)\r\n            time.sleep(0.15)\r\n        except:\r\n            fail_set[emplid] = [v for v in input_set[emplid]]\r\n            continue\r\n        for val in input_set[emplid]:\r\n            try:\r\n                refresh_iframe(driver, \"ptifrmtgtframe\", 0.25, True)\r\n                element = driver.find_elements(By.CLASS_NAME, \"PSGRIDCOUNTER\")[0]\r\n                result = str(driver.execute_script('return arguments[0].textContent;', element))\r\n                result_split = result.split(' ')\r\n                SCROLLONESIZE = int(result_split[len(result_split) - 1])\r\n                if SCROLLONESIZE > 1:\r\n                    exec_ENSURE(driver, \"$ICField3$hviewall$0\", \"arguments[0].click();\", 0.25)\r\n                row_i = -1\r\n                for i in range(SCROLLONESIZE):\r\n                    element = driver.find_element(By.ID, f'EXTERNAL_SYSKEY_EXTERNAL_SYSTEM${i}')\r\n                    SYSID = driver.execute_script('return arguments[0].options[arguments[0].selectedIndex].textContent;', element)\r\n                    if SYSID == \"Open Researcher & Contributor\":\r\n                        row_i = i\r\n                        break\r\n                if row_i == -1:\r\n                    exec_ENSURE(driver, f'$ICField3$new${SCROLLONESIZE - 1}$$0', \"arguments[0].click();\", 0.25)\r\n                    select_option(driver, f\"EXTERNAL_SYSKEY_EXTERNAL_SYSTEM${SCROLLONESIZE}\", \"Open Researcher & Contributor\", 0.15)\r\n                    tabout_FOCUS(driver, f\"EXTERNAL_SYSKEY_EXTERNAL_SYSTEM${SCROLLONESIZE}\", 0.15)\r\n                    row_i = SCROLLONESIZE \r\n\r\n                if row_i < SCROLLONESIZE:\r\n                    exec_ENSURE(driver, f'EXTERNAL_SYSTEM$new${row_i}$${row_i}', \"arguments[0].click();\", 0.5)\r\n                exec_ENSURE(driver, f'EXTERNAL_SYSTEM_EXTERNAL_SYSTEM_ID${row_i}', f\"arguments[0].value = '{val}';\", 0.25)\r\n                tabout_FOCUS(driver, f'EXTERNAL_SYSTEM_EXTERNAL_SYSTEM_ID${row_i}', 0.75)    \r\n                exec_ENSURE(driver, f'#ICSave', \"arguments[0].click();\", 0.0) # Does not trigger dynamic content.\r\n                driver.switch_to.default_content()\r\n                element = wait_ALERT(driver, 'alertmsg', 0.0)\r\n                if element:\r\n                    raise Exception\r\n            except:# element not found or execute script error\r\n                if emplid in fail_set.keys():\r\n                    fail_set[emplid].append(val)\r\n                else:\r\n                    fail_set[emplid] = [val]\r\n\r\n    return fail_set\r\n\r\ndef Start(input_set: dict[list]):\r\n    \"\"\"\r\n    Starts the automation process and retries if necessary.\r\n\r\n    Args:\r\n        input_set (dict[list]): A dictionary containing input data for automation.\r\n\r\n    Returns:\r\n        dict: A dictionary containing failed automation attempts.\r\n    \"\"\"", "mimetype": "text/plain", "start_char_idx": 3689, "end_char_idx": 7932, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "af082a0d-3469-401c-9e13-0b2141d5f754": {"__data__": {"id_": "af082a0d-3469-401c-9e13-0b2141d5f754", "embedding": null, "metadata": {"file_path": "C:\\Users\\Josh\\Desktop\\DEV\\AGENTS\\V-1\\AI-Agent-Code-Generator\\data\\codebase\\main1.py", "file_name": "main1.py", "file_type": "text/x-python", "file_size": 9306, "creation_date": "2025-03-15", "last_modified_date": "2025-03-15"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "73120af9-c087-4f11-b055-209520d9e932", "node_type": "4", "metadata": {"file_path": "C:\\Users\\Josh\\Desktop\\DEV\\AGENTS\\V-1\\AI-Agent-Code-Generator\\data\\codebase\\main1.py", "file_name": "main1.py", "file_type": "text/x-python", "file_size": 9306, "creation_date": "2025-03-15", "last_modified_date": "2025-03-15"}, "hash": "e365a9723e6def6f0a084e8c2aa04116ca531fe30b084d995e255dac67f99222", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b9e97fb9-8805-4445-ac56-74f073ec4786", "node_type": "1", "metadata": {"file_path": "C:\\Users\\Josh\\Desktop\\DEV\\AGENTS\\V-1\\AI-Agent-Code-Generator\\data\\codebase\\main1.py", "file_name": "main1.py", "file_type": "text/x-python", "file_size": 9306, "creation_date": "2025-03-15", "last_modified_date": "2025-03-15"}, "hash": "df4509146ae164ca41cb504ea421cd320e18fc89adc8a8d110eccb8f4a755fc7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "driver.switch_to.default_content()\r\n                element = wait_ALERT(driver, 'alertmsg', 0.0)\r\n                if element:\r\n                    raise Exception\r\n            except:# element not found or execute script error\r\n                if emplid in fail_set.keys():\r\n                    fail_set[emplid].append(val)\r\n                else:\r\n                    fail_set[emplid] = [val]\r\n\r\n    return fail_set\r\n\r\ndef Start(input_set: dict[list]):\r\n    \"\"\"\r\n    Starts the automation process and retries if necessary.\r\n\r\n    Args:\r\n        input_set (dict[list]): A dictionary containing input data for automation.\r\n\r\n    Returns:\r\n        dict: A dictionary containing failed automation attempts.\r\n    \"\"\"\r\n    fail_set = {}\r\n    options = Options()\r\n    options.debugger_address = \"localhost:9222\"\r\n    driver = webdriver.Chrome(options=options)\r\n    driver.implicitly_wait(5)\r\n    url_start = driver.current_url\r\n    i = 1\r\n    fail_set = Automate(input_set, driver, url_start)\r\n    while i < RETRY and len(fail_set) > 0:\r\n        i += 1\r\n        fail_set = Automate(fail_set, driver, url_start)\r\n    return fail_set\r\n\r\nif __name__ == \"__main__\":\r\n    input = {}\r\n    with open(sys.argv[1], 'r') as csv_file:\r\n        csv_reader = csv.reader(csv_file)\r\n        next(csv_reader)\r\n        for row in csv_reader:\r\n            emplid = row[0]\r\n            extID = row[1]\r\n            if emplid not in input.keys():\r\n                input[emplid] = []\r\n            if extID not in input[emplid]:\r\n                input[emplid].append(extID)\r\n    fail_set = Start(input)\r\n    input_sz = sum([len(input[k]) for k in input.keys()])\r\n    if len(fail_set) == 0:\r\n        print(f\"Automation complete for {input_sz} input with 0 errors.\")\r\n    else:\r\n        print(f\"Automation complete for {input_sz} input with {fail_set_sz} errors. The task could not be automated for the following input:\")\r\n        for emplid in fail_set.keys():\r\n            print(str(emplid) + \": \", end=\"\")\r\n            for val in fail_set[emplid]:\r\n                print(str(val), end=\" \")\r\n            print('')", "mimetype": "text/plain", "start_char_idx": 7220, "end_char_idx": 9304, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "db02cefd-6d7f-4810-9dd8-2c6a5211c6f7": {"__data__": {"id_": "db02cefd-6d7f-4810-9dd8-2c6a5211c6f7", "embedding": null, "metadata": {"file_path": "C:\\Users\\Josh\\Desktop\\DEV\\AGENTS\\V-1\\AI-Agent-Code-Generator\\data\\codebase\\main2.py", "file_name": "main2.py", "file_type": "text/x-python", "file_size": 5683, "creation_date": "2025-03-15", "last_modified_date": "2025-03-15"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f708d704-319b-49d8-8fbb-4d3edb212eef", "node_type": "4", "metadata": {"file_path": "C:\\Users\\Josh\\Desktop\\DEV\\AGENTS\\V-1\\AI-Agent-Code-Generator\\data\\codebase\\main2.py", "file_name": "main2.py", "file_type": "text/x-python", "file_size": 5683, "creation_date": "2025-03-15", "last_modified_date": "2025-03-15"}, "hash": "17540f8e4dee22c44ebc518651401a988c820fcaa1d097b04a8f04547c4e5b95", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "105cbce5-0d4c-4444-88ab-6df1593ec120", "node_type": "1", "metadata": {}, "hash": "e5abeed805f449487d076ebbf3b51d8957c0c23b359b91130f9a1583d7c165b8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "import sys\r\nfrom selenium import webdriver\r\nfrom selenium.webdriver.common.by import By\r\nfrom selenium.webdriver.chrome.options import Options\r\nimport time\r\nfrom selenium.webdriver.common.keys import Keys\r\nfrom selenium.webdriver.common.by import By\r\n\r\nRETRY = 1\r\nJs = {\r\n    \"clck\": \"arguments[0].click()\",\r\n    \"set-txt\": \"arguments[0].value = \",\r\n    \"get-txt\": \"return arguments[0].value;\",\r\n    \"get-selectedOptTxtCnt\": \"return arguments[0].options[arguments[0].selectedIndex].textContent;\",\r\n    \"get-txtCnt\": \"return arguments[0].textContent;\",\r\n    \"set-selectInd\": \"arguments[0].selectedIndex = \",\r\n    \"srch-set-OPT\": \"for (let i = 0; i < arguments[0].length; i++) {if (arguments[0][i].text == arguments[1]) { arguments[0].selectedIndex = i; break; }}\"\r\n}\r\n\r\ndef sendkeys_ENSURE(driver: webdriver.Chrome, id: str, val: str, sec: float = 0.2) -> int:   \r\n    \"\"\"\r\n    Sends keys to a web element identified by its ID, ensuring the element is cleared before sending keys.\r\n    \r\n    Args:\r\n        driver (webdriver.Chrome): The Selenium WebDriver instance.\r\n        id (str): The ID of the web element.\r\n        val (str): The value to send to the web element.\r\n        sec (float, optional): The time to wait after sending keys. Defaults to 0.2 seconds. \r\n    \r\n    Returns:\r\n        int: 0 if successful, or an exception if an error occurs.\r\n    \"\"\"\r\n    try:\r\n        element = driver.find_element(By.ID, id)\r\n        element.clear()\r\n        element.send_keys(val)\r\n        element.send_keys(Keys.TAB)\r\n        time.sleep(sec)\r\n        return 0\r\n    except Exception as e:\r\n        return e\r\n\r\ndef exec_ENSURE(driver: webdriver.Chrome, id: str, script: str, sec: float = 0.2) -> int:    \r\n    \"\"\"\r\n    Executes a JavaScript script on a web element identified by its ID.\r\n    \r\n    Args:\r\n        driver (webdriver.Chrome): The Selenium WebDriver instance.\r\n        id (str): The ID of the web element.\r\n        script (str): The JavaScript script to execute.\r\n        sec (float, optional): The time to wait after executing the script. Defaults to 0.2 seconds.\r\n    \r\n    Returns:\r\n        int: The response from the script execution, or 0 if successful, or an exception if an error occurs.\r\n    \"\"\"\r\n    try:\r\n        element = driver.find_element(By.ID, id)\r\n        response = driver.execute_script(script, element)\r\n        time.sleep(sec)\r\n        return response or 0\r\n    except Exception as e:\r\n        return e\r\n\r\ndef Automate(input_set: list, driver: webdriver.Chrome, url_start: str, password_new: str):  \r\n    \"\"\"\r\n    Automates the password reset process for a list of user IDs.\r\n    \r\n    Args:\r\n        input_set (list): A list of user IDs to process.\r\n        driver (webdriver.Chrome): The Selenium WebDriver instance.\r\n        url_start (str): The starting URL for the automation process.\r\n        password_new (str): The new password to set for each user.\r\n    \r\n    Returns:\r\n        list: A list of user IDs for which the automation failed.\r\n    \"\"\"\r\n    line_buffer = []\r\n    for emplid in input_set:\r\n        try:\r\n            driver.get(url_start)\r\n            driver.switch_to.frame(driver.find_element(By.ID, \"ptifrmtgtframe\"))\r\n            sendkeys_ENSURE(driver, \"PSOPRDEFN_SRCH_OPRID\", emplid)\r\n            driver.find_element(By.ID, \"#ICSearch\").click()\r\n            driver.execute_script(\r\n                f'if(document.getElementById(\"ICTAB_0\").getAttribute(\"aria-selected\") == \"false\") {{ document.getElementById(\"ICTAB_0\").click(); }}'\r\n            )\r\n            exec_ENSURE(driver, \"PSUSRPRFL_WRK_CHANGE_PWD_BTN\", Js['clck'])\r\n            sendkeys_ENSURE(driver, \"PSUSRPRFL_WRK_OPERPSWD\", password_new)\r\n            sendkeys_ENSURE(driver, \"PSUSRPRFL_WRK_OPERPSWDCONF\", password_new)\r\n            driver.find_element(By.ID, \"#ICSave\").click()\r\n            exec_ENSURE(driver, \"#ICSave\", Js['clck'], 0.75)\r\n            driver.execute_script(\r\n                f'if(document.getElementById(\"PSUSRPRFL_WRK_OPERPSWD\")) {{throw new Error(\"Password did not save.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4004, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "105cbce5-0d4c-4444-88ab-6df1593ec120": {"__data__": {"id_": "105cbce5-0d4c-4444-88ab-6df1593ec120", "embedding": null, "metadata": {"file_path": "C:\\Users\\Josh\\Desktop\\DEV\\AGENTS\\V-1\\AI-Agent-Code-Generator\\data\\codebase\\main2.py", "file_name": "main2.py", "file_type": "text/x-python", "file_size": 5683, "creation_date": "2025-03-15", "last_modified_date": "2025-03-15"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f708d704-319b-49d8-8fbb-4d3edb212eef", "node_type": "4", "metadata": {"file_path": "C:\\Users\\Josh\\Desktop\\DEV\\AGENTS\\V-1\\AI-Agent-Code-Generator\\data\\codebase\\main2.py", "file_name": "main2.py", "file_type": "text/x-python", "file_size": 5683, "creation_date": "2025-03-15", "last_modified_date": "2025-03-15"}, "hash": "17540f8e4dee22c44ebc518651401a988c820fcaa1d097b04a8f04547c4e5b95", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db02cefd-6d7f-4810-9dd8-2c6a5211c6f7", "node_type": "1", "metadata": {"file_path": "C:\\Users\\Josh\\Desktop\\DEV\\AGENTS\\V-1\\AI-Agent-Code-Generator\\data\\codebase\\main2.py", "file_name": "main2.py", "file_type": "text/x-python", "file_size": 5683, "creation_date": "2025-03-15", "last_modified_date": "2025-03-15"}, "hash": "8b197ce3bce6f709e3d78844ced849922d4f4e700678b53e7a73f6948e234c61", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\");}}'\r\n            )\r\n        except:\r\n            line_buffer.append(emplid)\r\n    try:\r\n        driver.get(url_start)\r\n    except:\r\n        pass\r\n    return line_buffer\r\n\r\ndef Start(input_set: list, password_new: str):\r\n    \"\"\"\r\n    Initiates the password reset automation process.\r\n    \r\n    Args:\r\n        input_set (list): A list of user IDs to process.\r\n        password_new (str): The new password to set for each user.\r\n    \r\n    Returns:\r\n        list: A list of user IDs for which the automation failed after retries.\r\n    \"\"\"\r\n    fail_set = []\r\n    options = Options()\r\n    options.debugger_address = \"localhost:9222\"\r\n    driver = webdriver.Chrome(options=options)\r\n    driver.implicitly_wait(5)\r\n    url_start = driver.current_url\r\n    i = 1\r\n    fail_set = Automate(input_set, driver, url_start, password_new)\r\n    while i < RETRY and len(fail_set) > 0:\r\n        i += 1\r\n        fail_set = Automate(fail_set, driver, url_start, password_new)\r\n    return fail_set\r\n\r\nif __name__ == \"__main__\":\r\n    input = []\r\n    with open(sys.argv[1], 'r') as file:\r\n        input = file.read().split(\"\\n\")\r\n    unique_list = []\r\n    [unique_list.append(val) for val in input if val not in unique_list]\r\n    password_new = sys.argv[2]\r\n    fail_set = Start(unique_list, password_new)\r\n    input_sz = len(input) \r\n    fail_set_sz = len(fail_set)\r\n    if len(fail_set) == 0:\r\n        print(f\"Automation complete for {input_sz} input with 0 errors.\")\r\n    else:\r\n        print(f\"Automation complete for {input_sz} input with {fail_set_sz} errors. The task could not be automated for the following input:\")\r\n        for fail in fail_set:\r\n            print(\"\\n\" + str(fail), end=\" \")", "mimetype": "text/plain", "start_char_idx": 4004, "end_char_idx": 5683, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"73120af9-c087-4f11-b055-209520d9e932": {"node_ids": ["89177e8e-f44a-4bae-b91a-463329c381fc", "b9e97fb9-8805-4445-ac56-74f073ec4786", "af082a0d-3469-401c-9e13-0b2141d5f754"], "metadata": {"file_path": "C:\\Users\\Josh\\Desktop\\DEV\\AGENTS\\V-1\\AI-Agent-Code-Generator\\data\\codebase\\main1.py", "file_name": "main1.py", "file_type": "text/x-python", "file_size": 9306, "creation_date": "2025-03-15", "last_modified_date": "2025-03-15"}}, "f708d704-319b-49d8-8fbb-4d3edb212eef": {"node_ids": ["db02cefd-6d7f-4810-9dd8-2c6a5211c6f7", "105cbce5-0d4c-4444-88ab-6df1593ec120"], "metadata": {"file_path": "C:\\Users\\Josh\\Desktop\\DEV\\AGENTS\\V-1\\AI-Agent-Code-Generator\\data\\codebase\\main2.py", "file_name": "main2.py", "file_type": "text/x-python", "file_size": 5683, "creation_date": "2025-03-15", "last_modified_date": "2025-03-15"}}}}